/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package makebook

//TODO: fix hiero.tsv - the data isn't right - js file is correct
//      finish lookups here and writing to a file

import net.kemetdict.data.Gardiner
import net.kemetdict.data.Hiero
import net.kemetdict.data.Translate
import net.kemetdict.data.Transliteration

class App {
    static void main(String[] args) {

        def gardiner = new File("./gardiner.tsv").readLines()
        def hiero = new File("./hiero.tsv").readLines()
        def translation = new File("./translation.tsv").readLines()
        def transliterate = new File("./transliteration.tsv").readLines()

        def output = new File("./output.txt")
        output.write("")

        def hglyph = {
            def result = ''

            def n = Integer.parseInt("13000", 16)
            if (n <= 0x10FFFF) {
//        char[] ch=Character.toChars(codepoint);

//        result += String.fromCodePoint(n)
                result += Character.toChars(n);
            } else {
                //result += 'hex2Char error: Code point out of range: '+ dec2hex(n)
            }

            return result;
        }

        def hieroMap = [:]
        hiero.each {strit ->
            def tmp = new Hiero()
            def starr = strit.split(",")

            starr.eachWithIndex {it, idx ->
                switch (idx) {
                    case 0:
                        tmp.id = it
                        break
                    case 1:
                        tmp.version = it
                        break
                    case 2:
                        tmp.unicodeCode = it
                        break
                    case 3:
                        tmp.gardinerCode = it
                        break
                    case 4:
                        tmp.gardinerCategory = it
                        break
                    case 5:
                        tmp.adjustedGardinerCode = it
                        break
                    case 6:
                        tmp.additionalDetails = it
                        break
                }
            }

            hieroMap.put(tmp.adjustedGardinerCode, tmp)
        }

        def gardinerMap = [:]
        gardiner.each {
            def tmp = new Gardiner()
            def starr = it.split(/\t/)

            starr.eachWithIndex { String entry, int i ->
                switch (i) {
                    case 0:
                        tmp.gardiner = entry
                        break
                    case 1:
                        tmp.transliteration = entry
                        break
                    case 2:
                        tmp.translation = entry
                        break
                }
            }

            def tmpg = new StringBuilder()
            if (tmp.gardiner.contains("-")) {
                tmp.gardiner.split("-").each {
                    def tmpHiero = hieroMap.get(it)
                    if (tmpHiero) {
                        output.append(hglyph(hieroMap.get(it).unicodeCode))
                    } else {
                        output.append(tmp.gardiner)
                        output.append(" " + hieroMap.get(tmp.gardiner) + "\n")
                    }

                }
            } else {
                def tmpHiero = hieroMap.get(tmp.gardiner)
                if (tmpHiero) {
                    output.append(hglyph(hieroMap.get(tmp.gardiner).unicodeCode))
                } else {
                    output.append(tmp.gardiner)
                    output.append(" " + hieroMap.get(tmp.gardiner) + "\n")
                }
            }

            output << tmpg
            output << "\n"
        }
    }
}
